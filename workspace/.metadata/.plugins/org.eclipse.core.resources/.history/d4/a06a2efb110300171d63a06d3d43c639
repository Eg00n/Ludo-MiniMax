package LUDOSimulator;
import java.util.Random;

public class MiniMax implements LUDOPlayer {

	LUDOBoard board;
	Random rand;
	
	public MiniMax(LUDOBoard board) {
		this.board = board;
		rand = new Random();
	}
	
	public void play() {
		board.print("Minimax playing");

		int[] myBricksValue = new int[4];  
		
		board.rollDice();
		
		int bestIndex = StartMiniMax();
		
		if(bestIndex!=-1) board.moveBrick(bestIndex);
	}
	
	float bestState = 0; 
	int depth = 4; 
	int depthCounter = 0;
	
	int[][] current_board;
	
	public int StartMiniMax()
	{
		current_board = board.getBoardState();
		float max =-1;
		int bestIndex = -1;
		
		for(int i=0;i<4;i++)
		{
			float value = MaxValue(current_board); 
			if(value>max&&value>0) {
				bestIndex = i;
				max = value;
			}
		}
		return bestIndex;
	}
	
	public double Utility(){
		return 0;
	}
	public float MaxValue(int[][] current_board)
	{
		//foreach brick 
		for(int i =0; 0<=4;i++)
		{
			//check for moveable brick 
			if(board.moveable(i))
			{
				//Checks depth of the tree
				if(depthCounter<depth)
				{
					int[][] new_board = board.getNewBoardState(i, board.getMyColor(), board.getDice());
					//check for best value of move in marked state
					if(analyzeBrickSituation(i, new_board)>=bestState&&bestState>0)
					{
						bestState=analyzeBrickSituation(i, new_board);
						MinValue(new_board);
						return bestState;
					}
				}
				else
				{
					break;	
				}
			}
			else
			{
				return 0;	
			}
			return 0;
		}
		return 0;	
	}
	public float MinValue(int[][] current_board){
		{
			//foreach brick 
			for(int i =0; 0<=4;i++)
			{
				//check for moveable brick 
				if(board.moveable(i))
				{
					//Checks depth of the tree
					if(depthCounter<depth)
					{
						int[][] new_board = board.getNewBoardState(i, board.getMyColor(), board.getDice());
						//check for best value of move in marked state
						if(analyzeBrickSituation(i, new_board)>=bestState&&bestState>0)
						{
							bestState=analyzeBrickSituation(i, new_board);
							MaxValue(new_board);
							return bestState;
						}
					}
					else
					{
						break;	
					}
				}
				else
				{
					return 0;	
				}
				return 0;
			}
			return 0;
		}
		}
	
	public float analyzeBrickSituation(int i, int[][] new_board) {
		if(board.moveable(i)) {

			if(hitOpponentHome(current_board,new_board)) {
				return 5+rand.nextFloat();
			}
			else if(hitMySelfHome(current_board,new_board)) {
				return (float)0.1;
			}
			else if(board.isStar(new_board[board.getMyColor()][i])) {
				return 4+rand.nextFloat();
			}
			else if(moveOut(current_board,new_board)) {
				return 3+rand.nextFloat();
			}
			else if(board.atHome(new_board[board.getMyColor()][i],board.getMyColor())) {
				return 2+rand.nextFloat();
			}
			else {
				return 1+rand.nextFloat();
			}
		}
		else {
			return 0;
		}
	}


	private boolean moveOut(int[][] current_board, int[][] new_board) {
		for(int i=0;i<4;i++) {
			if(board.inStartArea(current_board[board.getMyColor()][i],board.getMyColor())&&!board.inStartArea(new_board[board.getMyColor()][i],board.getMyColor())) {
				return true;
			}
		}
		return false;
	}

	private boolean hitOpponentHome(int[][] current_board, int[][] new_board) {
		for(int i=0;i<4;i++) {
			for(int j=0;j<4;j++) {
				if(board.getMyColor()!=i) {
					if(board.atField(current_board[i][j])&&!board.atField(new_board[i][j])) {
						return true;
					}
				}
			}
		}
		return false;
	}
	private boolean hitMySelfHome(int[][] current_board, int[][] new_board) {
		for(int i=0;i<4;i++) {
			if(!board.inStartArea(current_board[board.getMyColor()][i],board.getMyColor())&&board.inStartArea(new_board[board.getMyColor()][i],board.getMyColor())) {
				return true;
			}
		}
		return false;
	}
	
	
	
}
